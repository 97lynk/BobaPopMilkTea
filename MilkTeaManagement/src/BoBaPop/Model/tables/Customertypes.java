/*
 * This file is generated by jOOQ.
*/
package BoBaPop.Model.tables;


import BoBaPop.Model.Coffeemilkteamanager;
import BoBaPop.Model.Indexes;
import BoBaPop.Model.Keys;
import BoBaPop.Model.tables.records.CustomertypesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * InnoDB free: 6144 kB
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Customertypes extends TableImpl<CustomertypesRecord> {

    private static final long serialVersionUID = 1794193665;

    /**
     * The reference instance of <code>coffeemilkteamanager.customertypes</code>
     */
    public static final Customertypes CUSTOMERTYPES = new Customertypes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomertypesRecord> getRecordType() {
        return CustomertypesRecord.class;
    }

    /**
     * The column <code>coffeemilkteamanager.customertypes.CustomerTypeID</code>.
     */
    public final TableField<CustomertypesRecord, Integer> CUSTOMERTYPEID = createField("CustomerTypeID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>coffeemilkteamanager.customertypes.CustomerTypeName</code>.
     */
    public final TableField<CustomertypesRecord, String> CUSTOMERTYPENAME = createField("CustomerTypeName", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * Create a <code>coffeemilkteamanager.customertypes</code> table reference
     */
    public Customertypes() {
        this(DSL.name("customertypes"), null);
    }

    /**
     * Create an aliased <code>coffeemilkteamanager.customertypes</code> table reference
     */
    public Customertypes(String alias) {
        this(DSL.name(alias), CUSTOMERTYPES);
    }

    /**
     * Create an aliased <code>coffeemilkteamanager.customertypes</code> table reference
     */
    public Customertypes(Name alias) {
        this(alias, CUSTOMERTYPES);
    }

    private Customertypes(Name alias, Table<CustomertypesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Customertypes(Name alias, Table<CustomertypesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "InnoDB free: 6144 kB");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Coffeemilkteamanager.COFFEEMILKTEAMANAGER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CUSTOMERTYPES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CustomertypesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CUSTOMERTYPES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CustomertypesRecord> getPrimaryKey() {
        return Keys.KEY_CUSTOMERTYPES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CustomertypesRecord>> getKeys() {
        return Arrays.<UniqueKey<CustomertypesRecord>>asList(Keys.KEY_CUSTOMERTYPES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Customertypes as(String alias) {
        return new Customertypes(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Customertypes as(Name alias) {
        return new Customertypes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Customertypes rename(String name) {
        return new Customertypes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Customertypes rename(Name name) {
        return new Customertypes(name, null);
    }
}
